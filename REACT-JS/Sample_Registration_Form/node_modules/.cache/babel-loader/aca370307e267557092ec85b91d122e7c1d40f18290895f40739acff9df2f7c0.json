{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91834\\\\OneDrive\\\\Desktop\\\\Login_Form\\\\src\\\\components\\\\SimpleInput.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n\n// const SimpleInput = (props) => {\n//   // const nameInputRef=useRef();\n//  // const [enteredNameIsValid,setEnteredNameIsValid]=useState(false);\n//  const [enteredName,setEnteredName]=useState('');\n//  const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n\n//  const [enteredEmail,setEnteredEmail]=useState('');\n//  const [enteredEmailTouched,setEnteredEmailTouched]=useState(false);\n\n//   const enteredNameIsValid=enteredName.trim() !=='';\n//   const nameInputIsInvalid=!enteredNameIsValid&&enteredNameTouched;\n\n//   const enteredEmailIsValid=enteredEmail.includes('@');\n//   const emailInputIsInvalid=!enteredEmailIsValid&&enteredEmailTouched;\n//   let formIsValid=false;\n// // useEffect(()=>{\n\n//   if (enteredNameIsValid){\n//     //setFormIsValid(true);\n//     formIsValid=true;\n//   }\n//   //else{\n//    // setFormIsValid(false);\n//  // }\n// //},[enteredNameIsValid]);\n\n// //     console.log('Name input is valid!');\n// //   }\n\n//   const nameInputChangeHandler=(event)=>{\n// setEnteredName(event.target.value);\n//   };\n\n//   const nameInputBlurHandler=event=>{\n//     setEnteredNameTouched(true);\n//   };\n\n//   const emailInputChangeHandler=(event)=>{\n//     setEnteredEmail(event.target.value);\n//       };\n\n//       const emailInputBlurHandler=event=>{\n//         setEnteredEmailTouched(true);\n//       };\n//   const formSubbmitionHandler=(event)=>{\n// event.preventDefault();\n\n// setEnteredNameTouched(true);\n// if(!enteredNameIsValid){\n//   return;\n// }\n// //  if(enteredName.trim()===''){\n// //   setEnteredNameIsValid(false);\n// //   return;\n// // }\n\n// //setEnteredNameIsValid(true);\n\n// console.log(enteredName);\n\n// // const enteredValue=nameInputRef.current.value;\n// // console.log(enteredValue);\n// setEnteredName('');\n// setEnteredNameTouched(false);\n//   };\n\n//   const nameInputClasses = nameInputIsInvalid\n//   ? 'form-control invalid'\n//   : 'form-control';\n\n// const emailInputClasses = emailInputIsInvalid\n//   ? 'form-control invalid'\n//   : 'form-control';\n\n//   return (\n//     <form onSubmit={formSubbmitionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input \n//         // ref={nameInputRef }\n//         type='text' id='name'\n//         onChange={nameInputChangeHandler} \n//         onBlur={nameInputBlurHandler} />\n//       {nameInputIsInvalid && <p  className=\"error-text\">Must and should enter your name...</p>}\n//       </div>\n\n//       <div className={emailInputClasses}>\n//         <label htmlFor='email'>Your E-Mail</label>\n//         <input\n//           type='email'\n//           id='email'\n//           onChange={emailInputChangeHandler}\n//           onBlur={emailInputBlurHandler}\n//           value={enteredEmail}\n//         />\n//         {emailInputClasses && (\n//           <p className='error-text'>Please enter a valid email.</p>\n//         )}\n//       </div>\n//       <div className=\"form-actions\">\n//         <button disabled={!formIsValid}>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput;\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    if (!enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredName);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    resetNameInput();\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangedHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-Mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), enteredEmailIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"WH8t4xtaPVJmLvHpIk8PDwN0HdM=\", false, function () {\n  return [useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","jsxDEV","_jsxDEV","SimpleInput","props","_s","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","enteredEmailIsInvalid","formIsValid","emailInputChangeHandler","event","target","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onBlur","disabled","_c","$RefreshReg$"],"sources":["C:/Users/91834/OneDrive/Desktop/Login_Form/src/components/SimpleInput.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n\n\n// const SimpleInput = (props) => {\n//   // const nameInputRef=useRef();\n//  // const [enteredNameIsValid,setEnteredNameIsValid]=useState(false);\n//  const [enteredName,setEnteredName]=useState('');\n//  const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n\n//  const [enteredEmail,setEnteredEmail]=useState('');\n//  const [enteredEmailTouched,setEnteredEmailTouched]=useState(false);\n\n//   const enteredNameIsValid=enteredName.trim() !=='';\n//   const nameInputIsInvalid=!enteredNameIsValid&&enteredNameTouched;\n\n//   const enteredEmailIsValid=enteredEmail.includes('@');\n//   const emailInputIsInvalid=!enteredEmailIsValid&&enteredEmailTouched;\n//   let formIsValid=false;\n// // useEffect(()=>{\n\n//   if (enteredNameIsValid){\n//     //setFormIsValid(true);\n//     formIsValid=true;\n//   }\n//   //else{\n//    // setFormIsValid(false);\n//  // }\n// //},[enteredNameIsValid]);\n\n\n// //     console.log('Name input is valid!');\n// //   }\n\n\n//   const nameInputChangeHandler=(event)=>{\n// setEnteredName(event.target.value);\n//   };\n\n//   const nameInputBlurHandler=event=>{\n//     setEnteredNameTouched(true);\n//   };\n\n//   const emailInputChangeHandler=(event)=>{\n//     setEnteredEmail(event.target.value);\n//       };\n    \n//       const emailInputBlurHandler=event=>{\n//         setEnteredEmailTouched(true);\n//       };\n//   const formSubbmitionHandler=(event)=>{\n// event.preventDefault();\n\n// setEnteredNameTouched(true);\n// if(!enteredNameIsValid){\n//   return;\n// }\n// //  if(enteredName.trim()===''){\n// //   setEnteredNameIsValid(false);\n// //   return;\n// // }\n\n// //setEnteredNameIsValid(true);\n\n// console.log(enteredName);\n\n// // const enteredValue=nameInputRef.current.value;\n// // console.log(enteredValue);\n// setEnteredName('');\n// setEnteredNameTouched(false);\n//   };\n\n//   const nameInputClasses = nameInputIsInvalid\n//   ? 'form-control invalid'\n//   : 'form-control';\n\n// const emailInputClasses = emailInputIsInvalid\n//   ? 'form-control invalid'\n//   : 'form-control';\n\n\n//   return (\n//     <form onSubmit={formSubbmitionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input \n//         // ref={nameInputRef }\n//         type='text' id='name'\n//         onChange={nameInputChangeHandler} \n//         onBlur={nameInputBlurHandler} />\n//       {nameInputIsInvalid && <p  className=\"error-text\">Must and should enter your name...</p>}\n//       </div>\n\n//       <div className={emailInputClasses}>\n//         <label htmlFor='email'>Your E-Mail</label>\n//         <input\n//           type='email'\n//           id='email'\n//           onChange={emailInputChangeHandler}\n//           onBlur={emailInputBlurHandler}\n//           value={enteredEmail}\n//         />\n//         {emailInputClasses && (\n//           <p className='error-text'>Please enter a valid email.</p>\n//         )}\n//       </div>\n//       <div className=\"form-actions\">\n//         <button disabled={!formIsValid}>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput;\nimport { useState } from 'react';\n\nimport useInput from '../hooks/use-input';\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  \n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    resetNameInput();\n\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? 'form-control invalid'\n    : 'form-control';\n\n  const emailInputClasses = enteredEmailIsInvalid\n    ? 'form-control invalid'\n    : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameChangedHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className='error-text'>Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your E-Mail</label>\n        <input\n          type='email'\n          id='email'\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {enteredEmailIsInvalid && (\n          <p className='error-text'>Please enter a valid email.</p>\n        )}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}